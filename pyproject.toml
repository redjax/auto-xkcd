[project]
name = "auto-xkcd"
version = "0.1.0"
description = "Default template for PDM package"
authors = [{ name = "redjax", email = "none@none.com" }]
dependencies = [
    "httpx>=0.27.0",
    "hishel>=0.0.24",
    "sqlalchemy>=2.0.29",
    "pendulum>=3.0.0",
    "pydantic>=2.6.4",
    "pydantic-settings>=2.2.1",
    "loguru>=0.7.2",
    "red-utils>=0.2.18",
    "msgpack>=1.0.8",
    "pandas>=2.2.1",
    "dynaconf>=3.2.5",
    "minio>=7.2.5",
    "chardet>=5.2.0",
    "fastparquet>=2024.2.0",
    "click>=8.1.7",
]
requires-python = ">=3.11"
readme = "README.md"
license = { text = "MIT" }

[project.optional-dependencies]
docs = [
    "pygments>=2.17.2",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.17",
    "mkdocstrings[python]>=0.24.3",
    "markdown-include>=0.8.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-autorefs>=1.0.1",
    "mkdocs-section-index>=0.3.8",
    "mkdocs-literate-nav>=0.6.1",
]
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = ["black>=24.3.0", "ruff>=0.3.4", "pytest-xdist>=3.5.0", "nox>=2024.3.2"]

[tool.pdm.scripts]

start-scrape = { cmd = "python src/auto_xkcd/cli.py pipelines scrape --overwrite-serial --loop-requests --max-loops 0 --loop-pause 3600", env = { "ENV_FOR_DYNACONF" = "prod" } }
start-scrape-dev = { cmd = "python src/auto_xkcd/cli.py pipelines scrape --overwrite-serial --loop-requests --max-loops 0 --loop-pause 3600", env = { "ENV_FOR_DYNACONF" = "dev" } }

get-current = { cmd = "python src/auto_xkcd/cli.py pipelines get-current", env = { "ENV_FOR_DYNACONF" = "prod" } }
get-current-dev = { cmd = "python src/auto_xkcd/cli.py pipelines get-current", env = { "ENV_FOR_DYNACONF" = "dev" } }

update-db = { cmd = "python src/auto_xkcd/cli.py pipelines update-db", env = { "ENV_FOR_DYNACONF" = "prod" } }
update-db-dev = { cmd = "python src/auto_xkcd/cli.py pipelines update-db", env = { "ENV_FOR_DYNACONF" = "dev" } }

loop-update-db = { cmd = "python src/auto_xkcd/cli.py pipelines update-db -c", env = { "ENV_FOR_DYNACONF" = "prod" } }
loop-update-db-dev = { cmd = "python src/auto_xkcd/cli.py pipelines update-db -c", env = { "ENV_FOR_DYNACONF" = "dev" } }

lint = { cmd = "ruff check ./ --config ruff.ci.toml --fix" }

docker-build-main = { shell = "docker build -t autoxkcd -f containers/auto-xkcd/Dockerfile ." }
docker-build-main-nocache = { shell = "docker build -t autoxkcd -f containers/auto-xkcd/Dockerfile . --no-cache" }

dockerctl = { shell = "python dockerctl.py" }
# compose-build-run-main-d = { shell = "./scripts/compose_full.sh" }
# compose-build-main-d = { shell = "./scripts/compose_build.sh" }
# compose-build-main-d-nocache = { shell = "./scripts/compose_build_no-cache.sh" }
# compose-run-main-d = { shell = "./scripts/compose_run.sh" }
# compose-down-main-d = { shell = "./scripts/compose_down.sh" }
# compose-logs-main-d = { shell = "./scripts/compose_logs.sh" }

# [tool.pixi.project]
# channels = ["conda-forge"]
# platforms = ["linux-64"]

# [tool.pixi.pypi-dependencies]
# auto-xkcd = { path = ".", editable = true }

# [tool.pixi.environments]
# default = { solve-group = "default" }
# docs = { features = ["docs"], solve-group = "default" }
