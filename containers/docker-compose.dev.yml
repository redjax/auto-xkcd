## [DEVELOPMENT]
# version: "3"

networks:
  auto_xkcd_backend:
  auto_xkcd_frontend:

volumes:
  redis_cache:

services:

  api:
    container_name: autoxkcd-api-d
    build:
      context: ..
      dockerfile: containers/auto-xkcd/Dockerfile
      target: dev
    env_file:
      - env_files/dev.env
    working_dir: /app
    command: ["python", "src/auto_xkcd/start_api.py"]

    #   ## Debugging entrypoints. Only uncomment 1 'entrypoint:' at a time
    #   # entrypoint: ["pwd"]
    #   # entrypoint: ["ls", "-la", "."]
    #   # entrypoint: ["ls", "-la", "/app"]

    volumes:
      - ../src:/app/src
      - ${AUTOXKCD_DATA_DIR:-./container_data/dev/auto-xkcd/data}:/app/.data
      - ${AUTOXKCD_LOGS_DIR:-./container_data/dev/auto-xkcd/logs}:/app/logs
    ports:
      - ${UVICORN_HOST_PORT:-8080}:8000
    expose:
      - 8000
    environment:
      ENV_FOR_DYNACONF: dev
      DYNACONF_ENV: dev
      DYNACONF_CONTAINER_ENV: true
      DYNACONF_LOG_LEVEL: "DEBUG"
      DYNACONF_LOGS_DIR: "logs/dev"

      DYNACONF_DB_TYPE: ${DB_TYPE:-sqlite}
      DYNACONF_DB_DRIVERNAME: ${DB_DRIVERNAME:-sqlite+pysqlite}
      DYNACONF_DB_USERNAME: ${DB_USERNAME}
      DYNACONF_DB_PASSWORD: ${DB_PASSWORD}
      DYNACONF_DB_HOST: ${DB_HOST}
      DYNACONF_DB_PORT: ${DB_PORT}
      DYNACONF_DB_DATABASE: ${DB_DATABASE:-/app/.data/auto-xkcd.dev.sqlite}
      DYNACONF_DB_ECHO: ${DB_ECHO:-true}

      DYNACONF_MINIO_ADDRESS: ${AUTOXKCD_MINIO_ADDRESS:-""}
      DYNACONF_MINIO_PORT: ${AUTOXKCD_MINIO_PORT:-9000}
      DYNACONF_MINIO_HTTPS: ${AUTOXKCD_MINIO_HTTPS:-true}
      DYNACONF_MINIO_USERNAME: ${AUTOXKCD_MINIO_USERNAME:-auto-xkcd}
      DYNACONF_MINIO_PASSWORD: ${AUTOXKCD_MINIO_PASSWORD:-""}
      DYNACONF_MINIO_ACCESS_KEY: ${AUTOXKCD_MINIO_ACCESS_KEY:-""}
      DYNACONF_MINIO_ACCESS_SECRET: ${AUTOXKCD_MINIO_ACCESS_SECRET:-""}

      ##
      # FastAPI
      ##
      DYNACONF_FASTAPI_DEBUG: ${FASTAPI_DEBUG:-true}
      DYNACONF_FASTAPI_TITLE: ${FASTAPI_TITLE:-"[DEV] auto-xkcd"}
      DYNACONF_FASTAPI_SUMMARY: ${FASTAPI_SUMMARY:-"An overengineered app to get XKCD comics"}
      DYNACONF_FASTAPI_DESCRIPTION: ${FASTAPI_DESCRIPTION:-"API for getting XKCD comics. This is a learning project, and intentionally over-engineered as a result."}
      DYNACONF_FASTAPI_VERSION: ${FASTAPI_VERSION:-"0.1.0"}
      DYNACONF_FASTAPI_OPENAPI_URL: ${FASTAPI_OPENAPI_URL:-"/openapi.json"}
      DYNACONF_FASTAPI_REDIRECT_SLASHES: ${FASTAPI_REDIRECT_SLASHES:-true}
      DYNACONF_FASTAPI_DOCS_URL: ${FASTAPI_DOCS_URL:-"/docs"}
      DYNACONF_FASTAPI_REDOC_URL: ${FASTAPI_REDOC_URL:-"/redoc"}
      DYNACONF_FASTAPI_OPENAPI_PREFIX: ${FASTAPI_OPENAPI_PREFIX:-""}
      DYNACONF_FASTAPI_ROOT_PATH: ${FASTAPI_ROOT_PATH:-""}
      DYNACONF_FASTAPI_ROOT_PATH_IN_SERVERS: ${FASTAPI_ROOT_PATH_IN_SERVERS:-true}
      DYNACONF_FASTAPI_INCLUDE_ADMIN_ROUTER: ${FASTAPI_INCLUDE_ADMIN_ROUTER:-true}

      ##
      # Uvicorn
      ##
      DYNACONF_UVICORN_APP: ${UVICORN_APP:-api._main:app}
      DYNACONF_UVICORN_HOST: ${UVICORN_HOST:-"0.0.0.0"}
      DYNACONF_UVICORN_PORT: ${UVICORN_PORT:-8000}
      DYNACONF_UVICORN_ROOT_PATH: ${UVICORN_ROOT_PATH:-""}
      DYNACONF_UVICORN_RELOAD: ${UVICORN_RELOAD:-true}
      DYNACONF_UVICORN_LOG_LEVEL: ${UVICORN_LOG_LEVEL:-DEBUG}

      ##
      # Celery
      ##

      DYNACONF_CELERY_BROKER_HOST: ${CELERY_BROKER_HOST:-rabbitmq}
      DYNACONF_CELERY_BROKER_PORT: ${CELERY_BROKER_PORT:-5672}
      DYNACONF_CELERY_BROKER_USER: ${CELERY_BROKER_USER:-rabbitmq}
      DYNACONF_CELERY_BROKER_PASS: ${CELERY_BROKER_PASS:-rabbitmq}

      DYNACONF_CELERY_BACKEND_HOST: ${CELERY_BROKER_BACKEND_HOST:-redis}
      DYNACONF_CELERY_BACKEND_PORT: ${CELERY_BROKER_BACKEND_PORT:-6379}

      ##
      # TELEGRAM
      ##
      DYNACONF_TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME:-""}
      DYNACONF_TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-""}

    depends_on:
      - redis
    networks:
      - auto_xkcd_backend
      - auto_xkcd_frontend

  celery_worker:
    container_name: autoxkcd-celery-worker-d
    build:
      context: ..
      dockerfile: containers/auto-xkcd/Dockerfile
      target: dev
    env_file:
      - env_files/dev.env
    working_dir: /app
    command: ["python", "src/auto_xkcd/start_celery_worker.py"]
    # command: ["celery", "--workdir=src/auto_xkcd", "-A", "celeryapp._celeryapp", "worker", "--loglevel=debug"]

    ## Debugging entrypoints. Only uncomment 1 'entrypoint:' at a time
    # entrypoint: ["pwd"]
    # entrypoint: ["ls", "-la", "."]
    # entrypoint: ["ls", "-la", "/app"]

    volumes:
      - ../src:/app/src
      - ${AUTOXKCD_DATA_DIR:-./container_data/dev/auto-xkcd/data}:/app/.data
      - ${AUTOXKCD_LOGS_DIR:-./container_data/dev/auto-xkcd/logs}:/app/logs
    # ports:
    #   - ${UVICORN_HOST_PORT:-8080}:8000
    environment:
      ENV_FOR_DYNACONF: dev
      DYNACONF_ENV: dev
      DYNACONF_CONTAINER_ENV: true
      DYNACONF_LOG_LEVEL: "DEBUG"
      DYNACONF_LOGS_DIR: "logs/dev"

      DYNACONF_DB_TYPE: ${DB_TYPE:-sqlite}
      DYNACONF_DB_DRIVERNAME: ${DB_DRIVERNAME:-sqlite+pysqlite}
      DYNACONF_DB_USERNAME: ${DB_USERNAME}
      DYNACONF_DB_PASSWORD: ${DB_PASSWORD}
      DYNACONF_DB_HOST: ${DB_HOST}
      DYNACONF_DB_PORT: ${DB_PORT}
      DYNACONF_DB_DATABASE: ${DB_DATABASE:-/app/.data/auto-xkcd.dev.sqlite}
      DYNACONF_DB_ECHO: ${DB_ECHO:-true}

      DYNACONF_MINIO_ADDRESS: ${AUTOXKCD_MINIO_ADDRESS:-""}
      DYNACONF_MINIO_PORT: ${AUTOXKCD_MINIO_PORT:-9000}
      DYNACONF_MINIO_HTTPS: ${AUTOXKCD_MINIO_HTTPS:-true}
      DYNACONF_MINIO_USERNAME: ${AUTOXKCD_MINIO_USERNAME:-auto-xkcd}
      DYNACONF_MINIO_PASSWORD: ${AUTOXKCD_MINIO_PASSWORD:-""}
      DYNACONF_MINIO_ACCESS_KEY: ${AUTOXKCD_MINIO_ACCESS_KEY:-""}
      DYNACONF_MINIO_ACCESS_SECRET: ${AUTOXKCD_MINIO_ACCESS_SECRET:-""}

      ##
      # FastAPI
      ##
      DYNACONF_FASTAPI_DEBUG: ${FASTAPI_DEBUG:-true}
      DYNACONF_FASTAPI_TITLE: ${FASTAPI_TITLE:-"[DEV] auto-xkcd"}
      DYNACONF_FASTAPI_SUMMARY: ${FASTAPI_SUMMARY:-"An overengineered app to get XKCD comics"}
      DYNACONF_FASTAPI_DESCRIPTION: ${FASTAPI_DESCRIPTION:-"API for getting XKCD comics. This is a learning project, and intentionally over-engineered as a result."}
      DYNACONF_FASTAPI_VERSION: ${FASTAPI_VERSION:-"0.1.0"}
      DYNACONF_FASTAPI_OPENAPI_URL: ${FASTAPI_OPENAPI_URL:-"/openapi.json"}
      DYNACONF_FASTAPI_REDIRECT_SLASHES: ${FASTAPI_REDIRECT_SLASHES:-true}
      DYNACONF_FASTAPI_DOCS_URL: ${FASTAPI_DOCS_URL:-"/docs"}
      DYNACONF_FASTAPI_REDOC_URL: ${FASTAPI_REDOC_URL:-"/redoc"}
      DYNACONF_FASTAPI_OPENAPI_PREFIX: ${FASTAPI_OPENAPI_PREFIX:-""}
      DYNACONF_FASTAPI_ROOT_PATH: ${FASTAPI_ROOT_PATH:-""}
      DYNACONF_FASTAPI_ROOT_PATH_IN_SERVERS: ${FASTAPI_ROOT_PATH_IN_SERVERS:-true}
      DYNACONF_FASTAPI_INCLUDE_ADMIN_ROUTEr: ${FASTAPI_INCLUDE_ADMIN_ROUTEr:-true}

      ##
      # Uvicorn
      ##
      DYNACONF_UVICORN_APP: ${UVICORN_APP:-api._main:app}
      DYNACONF_UVICORN_HOST: ${UVICORN_HOST:-"0.0.0.0"}
      DYNACONF_UVICORN_PORT: ${UVICORN_PORT:-8000}
      DYNACONF_UVICORN_ROOT_PATH: ${UVICORN_ROOT_PATH:-""}
      DYNACONF_UVICORN_RELOAD: ${UVICORN_RELOAD:-true}
      DYNACONF_UVICORN_LOG_LEVEL: ${UVICORN_LOG_LEVEL:-DEBUG}

      ##
      # Celery
      ##

      DYNACONF_CELERY_BROKER_HOST: ${CELERY_BROKER_HOST:-rabbitmq}
      DYNACONF_CELERY_BROKER_PORT: ${CELERY_BROKER_PORT:-5672}
      DYNACONF_CELERY_BROKER_USER: ${CELERY_BROKER_USER:-rabbitmq}
      DYNACONF_CELERY_BROKER_PASS: ${CELERY_BROKER_PASS:-rabbitmq}

      DYNACONF_CELERY_BACKEND_HOST: ${CELERY_BROKER_BACKEND_HOST:-redis}
      DYNACONF_CELERY_BACKEND_PORT: ${CELERY_BROKER_BACKEND_PORT:-6379}

      ##
      # Telegram
      ##
      DYNACONF_TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME:-""}
      DYNACONF_TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-""}

    depends_on:
      - api
      - redis
    links:
      - redis:redis
    networks:
      - auto_xkcd_backend

  celery_beat:
    container_name: autoxkcd-celery-beat-d
    build:
      context: ..
      dockerfile: containers/auto-xkcd/Dockerfile
      target: dev
    env_file:
      - env_files/dev.env
    working_dir: /app
    command: ["celery", "--workdir=src/auto_xkcd", "-A", "celeryapp._celeryapp", "beat", "--loglevel=debug", "-s", "celerybeat-schedule"]

    ## Debugging entrypoints. Only uncomment 1 'entrypoint:' at a time
    # entrypoint: ["pwd"]
    # entrypoint: ["ls", "-la", "."]
    # entrypoint: ["ls", "-la", "/app"]

    volumes:
      - ../src:/app/src
      - ${AUTOXKCD_DATA_DIR:-./container_data/dev/auto-xkcd/data}:/app/.data
      - ${AUTOXKCD_LOGS_DIR:-./container_data/dev/auto-xkcd/logs}:/app/logs
    # ports:
    #   - ${UVICORN_HOST_PORT:-8080}:8000
    environment:
      ENV_FOR_DYNACONF: dev
      DYNACONF_ENV: dev
      DYNACONF_CONTAINER_ENV: true
      DYNACONF_LOG_LEVEL: "DEBUG"
      DYNACONF_LOGS_DIR: "logs/dev"

      DYNACONF_DB_TYPE: ${DB_TYPE:-sqlite}
      DYNACONF_DB_DRIVERNAME: ${DB_DRIVERNAME:-sqlite+pysqlite}
      DYNACONF_DB_USERNAME: ${DB_USERNAME}
      DYNACONF_DB_PASSWORD: ${DB_PASSWORD}
      DYNACONF_DB_HOST: ${DB_HOST}
      DYNACONF_DB_PORT: ${DB_PORT}
      DYNACONF_DB_DATABASE: ${DB_DATABASE:-/app/.data/auto-xkcd.dev.sqlite}
      DYNACONF_DB_ECHO: ${DB_ECHO:-true}

      DYNACONF_MINIO_ADDRESS: ${AUTOXKCD_MINIO_ADDRESS:-""}
      DYNACONF_MINIO_PORT: ${AUTOXKCD_MINIO_PORT:-9000}
      DYNACONF_MINIO_HTTPS: ${AUTOXKCD_MINIO_HTTPS:-true}
      DYNACONF_MINIO_USERNAME: ${AUTOXKCD_MINIO_USERNAME:-auto-xkcd}
      DYNACONF_MINIO_PASSWORD: ${AUTOXKCD_MINIO_PASSWORD:-""}
      DYNACONF_MINIO_ACCESS_KEY: ${AUTOXKCD_MINIO_ACCESS_KEY:-""}
      DYNACONF_MINIO_ACCESS_SECRET: ${AUTOXKCD_MINIO_ACCESS_SECRET:-""}

      ##
      # FastAPI
      ##
      DYNACONF_FASTAPI_DEBUG: ${FASTAPI_DEBUG:-true}
      DYNACONF_FASTAPI_TITLE: ${FASTAPI_TITLE:-"[DEV] auto-xkcd"}
      DYNACONF_FASTAPI_SUMMARY: ${FASTAPI_SUMMARY:-"An overengineered app to get XKCD comics"}
      DYNACONF_FASTAPI_DESCRIPTION: ${FASTAPI_DESCRIPTION:-"API for getting XKCD comics. This is a learning project, and intentionally over-engineered as a result."}
      DYNACONF_FASTAPI_VERSION: ${FASTAPI_VERSION:-"0.1.0"}
      DYNACONF_FASTAPI_OPENAPI_URL: ${FASTAPI_OPENAPI_URL:-"/openapi.json"}
      DYNACONF_FASTAPI_REDIRECT_SLASHES: ${FASTAPI_REDIRECT_SLASHES:-true}
      DYNACONF_FASTAPI_DOCS_URL: ${FASTAPI_DOCS_URL:-"/docs"}
      DYNACONF_FASTAPI_REDOC_URL: ${FASTAPI_REDOC_URL:-"/redoc"}
      DYNACONF_FASTAPI_OPENAPI_PREFIX: ${FASTAPI_OPENAPI_PREFIX:-""}
      DYNACONF_FASTAPI_ROOT_PATH: ${FASTAPI_ROOT_PATH:-""}
      DYNACONF_FASTAPI_ROOT_PATH_IN_SERVERS: ${FASTAPI_ROOT_PATH_IN_SERVERS:-true}
      DYNACONF_FASTAPI_INCLUDE_ADMIN_ROUTEr: ${FASTAPI_INCLUDE_ADMIN_ROUTEr:-true}

      ##
      # Uvicorn
      ##
      DYNACONF_UVICORN_APP: ${UVICORN_APP:-api._main:app}
      DYNACONF_UVICORN_HOST: ${UVICORN_HOST:-"0.0.0.0"}
      DYNACONF_UVICORN_PORT: ${UVICORN_PORT:-8000}
      DYNACONF_UVICORN_ROOT_PATH: ${UVICORN_ROOT_PATH:-""}
      DYNACONF_UVICORN_RELOAD: ${UVICORN_RELOAD:-true}
      DYNACONF_UVICORN_LOG_LEVEL: ${UVICORN_LOG_LEVEL:-DEBUG}

      ##
      # Celery
      ##

      DYNACONF_CELERY_BROKER_HOST: ${CELERY_BROKER_HOST:-rabbitmq}
      DYNACONF_CELERY_BROKER_PORT: ${CELERY_BROKER_PORT:-5672}
      DYNACONF_CELERY_BROKER_USER: ${CELERY_BROKER_USER:-rabbitmq}
      DYNACONF_CELERY_BROKER_PASS: ${CELERY_BROKER_PASS:-rabbitmq}

      DYNACONF_CELERY_BACKEND_HOST: ${CELERY_BROKER_BACKEND_HOST:-redis}
      DYNACONF_CELERY_BACKEND_PORT: ${CELERY_BROKER_BACKEND_PORT:-6379}

      ##
      # Telegram
      ##
      DYNACONF_TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME:-""}
      DYNACONF_TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-""}

    depends_on:
      - api
      - redis
    links:
      - redis:redis
    networks:
      - auto_xkcd_backend

  rabbitmq:
    image: rabbitmq:management
    container_name: autoxkcd-celery-rabbitmq-d
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-rabbitmq}
      # RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-rabbitmq}
      # RABBITMQ_ENABLED_PLUGINS_FILE: /etc/rabbitmq/enabled_plugins
    ports:
      ## AMQP protocol
      - ${RABBITMQ_AMPQ_PORT:-5672}:5672
      - ${RABBITMQ_HTTP_PORT:-15672}:15672
    volumes:
      - ${RABBITMQ_DATA_DIR:-./container_data/dev/rabbitmq_redis/data/rabbitmq}:/var/lib/rabbitmq
      - ${RABBITMQ_LOGS_DIR:-./container_data/dev/rabbitmq_redis/logs/rabbitmq}:/var/log/rabbitmq
      - ./devcontainers/rabbitmq_redis/provision/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./devcontainers/rabbitmq_redis/provision/rabbitmq/rabbitmq.enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - auto_xkcd_backend
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  redis:
    ## Fix "overcommit memory" warning
    #  https://ourcodeworld.com/articles/read/2083/how-to-remove-redis-warning-on-docker-memory-overcommit-must-be-enabled
    #  https://r-future.github.io/post/how-to-fix-redis-warnings-with-docker/
    image: redis
    container_name: auto-xkcd-redis-d
    restart: unless-stopped
    command: redis-server --save 20 1 --loglevel verbose
    volumes:
      - ${REDIS_CACHE_DIR:-redis_cache}:/data
    expose:
      - 6379
    ports:
      - ${REDIS_PORT:-6379}:6379
    networks:
      - auto_xkcd_backend
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: auto-xkcd-redis-commander-d
    hostname: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:${REDIS_PORT:-6379}
    ports:
      - ${REDIS_COMMANDER_PORT:-8081}:8081
    networks:
      - auto_xkcd_backend
      - auto_xkcd_frontend
